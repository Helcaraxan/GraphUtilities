#ifndef GRAPH_UTILITIES_QUERIES
#define GRAPH_UTILITIES_QUERIES

#include <mutex>
#include <atomic>
#include <vector>
#include <condition_variable>

#include "graph-utilities/vertex.hpp"

using namespace std;


// Enumeration types

/* The IndexMethod values obey the following rules:
 * 0x01 (first bit) Indicates if predecessors are rescheduled on traversal
 * 0x02 (second bit) Indicates if successors are rescheduled on traversal
 * 0x04 (third bit) Indicates if successors and predecessors are ordered with their labels
 */
typedef enum {
  ShortIndexing = 0x00,
  SuccessorOrder = 0x02,
  Standard = 0x03,
  LabelOrder = 0x07,
  UndefinedIndexMethod = 0x10
} IndexMethod;


typedef enum {
  DFS,
  BBFS,
  NoLabels,
  UndefinedSearchMethod
} SearchMethod;


typedef enum {
  UndefinedPartitionMethod
} PartitionMethod;


typedef enum {
  Reachability,
  Partition
} QueryType;


typedef enum {
  Greedy,
  UndefinedCoarsenMethod
} CoarsenMethod;


// The Query class

class Query {
// Function members
public:
  // Constructor & Destructor
  Query(void) = default;
  virtual ~Query(void) = default;

  // Remove copy & move constructors
  Query(const Query&) = delete;
  Query(Query&&) = delete;
  Query& operator=(const Query&) = delete;
  Query& operator=(Query&&) = delete;
};



// The Reachability variant of the Query class

class ReachabilityQuery : public Query {
// Function members
public:
  // Access
  virtual Vertex * getSource(void) const = 0;
  virtual Vertex * getTarget(void) const = 0;
  virtual bool getAnswer(void) const = 0;
  virtual bool getError(void) const = 0;
  virtual SearchMethod getMethod(void) const = 0;

  // Modifications
  virtual void setSource(Vertex * sourceVertex) = 0;
  virtual void setTarget(Vertex * targetVertex) = 0;
  virtual void setMethod(SearchMethod value) = 0;
};


ReachabilityQuery * createRQuery(void);


// The Partition variant of the Query class

class PartitionQuery : public Query {
// Function members
public:
  PartitionQuery(void) = default;
  virtual ~PartitionQuery(void) = default;
};


PartitionQuery * createPQuery(void);



#endif // GRAPH_UTILITIES_QUERIES
