#ifndef GRAPH_UTILITIES_QUERIES
#define GRAPH_UTILITIES_QUERIES

#include <map>
#include <mutex>
#include <atomic>
#include <vector>
#include <condition_variable>

using namespace std;


// Forward declaration
class Graph;
class Vertex;
class Partition;


/*!
 * \file queries.hpp
 * \brief Header for the Query API.
 */


/////////////////////
// The Query class //
/////////////////////

/*!
 * \brief Top-type class for queries.
 *
 * Used in the Graph API to dimish it's complexity and provide a unique
 * interface for all queries.
 *
 * \sa Graph::pushQuery() and Graph::pullQuery()
 */
class Query {
// Function members
public:
  ////////////////////////////////
  // Constructors & Destructors //
  ////////////////////////////////

  Query(void) = default;
  virtual ~Query(void) = default;

  Query(const Query&) = delete;
  Query(Query&&) = delete;
  Query& operator=(const Query&) = delete;
  Query& operator=(Query&&) = delete;

  ////////////
  // Access //
  ////////////

  /*!
   * \brief Get the error flag associated with this query.
   *
   * Retrieve the value of the error flag of this query. It can be set for
   * various reasons.
   */
  virtual bool getError(void) const = 0;
};


//////////////////////////////
// The CoarsenQuery class //
//////////////////////////////

/*!
 * \brief Representation class for coarsen queries on a graph.
 *
 * This class enforces an interface for implementations of this library. It
 * describes a minimal API for high-level manipulations.
 */
class CoarsenQuery : public Query {
// Function members
public:
  ////////////
  // Access //
  ////////////

  /*!
   * \brief Get the coarsen factor for this coarsen query.
   *
   * Retrieve the primary factor that is currently associated with this coarsen
   * query.
   *
   * \return Value of the primary factor.
   *
   * \sa getSecondaryFactor()
   */
  virtual int getFactor(void) const = 0;

  /*!
   * \brief Get the secondary coarsen factor for this coarsen query.
   *
   * Retrieve the secondary factor that is currently associated with this
   * coarsen query.
   *
   * \return Value of the secondary factor.
   *
   * \sa getFactor()
   */
  virtual int getSecondaryFactor(void) const = 0;

  /*!
   * \brief Get the answer associated with this coarsen query.
   *
   * Retrieve the answer given to this coarsen query. The result is of
   * course invalid if the query has not yet been processed.
   *
   * \return Graph representing a coarsened version of the graph on which the
   * query was performed. If the query was not yet processed or an error occured
   * the returned value is \b nullptr.
   *
   * \sa Graph::pushQuery() and Graph::pullQuery()
   */
  virtual Graph * getAnswer(void) = 0;

  /*!
   * \brief Get the CoarsenMethod specified for this coarsen query.
   *
   * Retrieve the CoarsenMethod that is registered for this coarsen query and
   * that should be used when processing the query.
   *
   * \return The currently registered CoarsenMethod registered for this query.
   * \sa setMethod()
   */
  virtual CoarsenMethod getMethod(void) const = 0;

  /*!
   * \brief Get the correspondance map between nodes for this coarsen query.
   *
   * Retrieve the map containing the correspondance between nodes in the
   * original graph and the coarsened one.
   *
   * \return Reference to the map of index correspondances.
   */
  virtual map<int, int>& getMap(void) = 0;


  ///////////////////
  // Modifications //
  ///////////////////

  /*!
   * \brief Set the coarsen factor for this coarsen query.
   *
   * Modify the primary factor that is currently associated with this coarsen
   * query.
   *
   * \param newFactor The new primary factor to set.
   */
  virtual void setFactor(int newFactor) = 0;

  /*!
   * \brief Set the secondary coarsen factor for this coarsen query.
   *
   * Modify the secondary factor that is currently associated with this coarsen
   * query.
   *
   * \param newFactor The new secondary factor to set.
   */
  virtual void setSecondaryFactor(int newFactor) = 0;

  /*!
   * \brief Set the CoarsenMethod specified for this coarsen query.
   *
   * Modify the CoarsenMethod that is registered for this coarsen query and that
   * should be used when processing the query.
   *
   * \param newMethod The new CoarsenMethod to register.
   *
   * \sa getMethod()
   */
  virtual void setMethod(CoarsenMethod newMethod) = 0;
};


/*!
 * \fn CoarsenQuery * createCQuery(void)
 *
 * \brief CoarsenQuery instance generator
 *
 * Creates an instance of the CoarsenQuery class with the currently underlying
 * implementation.
 *
 * \return Pointer to a new CoarsenQuery instance.
 */
CoarsenQuery * createCQuery(void);


//////////////////////////////
// The PartitionQuery class //
//////////////////////////////

/*!
 * \brief Representation class for partition queries on a graph.
 *
 * This class enforces an interface for implementations of this library. It
 * describes a minimal API for high-level manipulations.
 */
class PartitionQuery : public Query {
// Function members
public:
  ////////////
  // Access //
  ////////////

  /*!
   * \brief Get the PartitionMethod specified for this partition query.
   *
   * Retrieve the PartitionMethod that is registered for this partition query
   * and that should be used when processing the query.
   *
   * \return The currently registered PartitionMethod registered for this query.
   * \sa setMethod()
   */
  virtual PartitionMethod getMethod(void) const = 0;

  /*!
   * \brief Retrieve the current configured number of worker threads.
   *
   * Retrieve the number of worker threads that is currently configured to run
   * this partition query.
   *
   * \return The current registered number of worker threads.
   * \sa setThreadCount()
   */
  virtual int getThreadCount(void) const = 0;

  /*!
   * \brief Retrieve pointer to the Partition obtained through this query.
   *
   * Retrieve a pointer to the Partition instance that was computed for this
   * query.
   *
   * \return Pointer to the obtained Partition. \b nullptr if the query was not
   * yet processed.
   */
  virtual const Partition * getPartition(void) const = 0;


  ///////////////////
  // Modifications //
  ///////////////////

  /*!
   * \brief Set the PartitionMethod specified for this partition query.
   *
   * Modify the PartitionMethod that is registered for this partition query and
   * that should be used when processing the query.
   *
   * \param newMethod The new PartitionMethod to register.
   *
   * \sa getMethod()
   */
  virtual void setMethod(PartitionMethod newMethod) = 0;

  /*!
   * \brief Set the number of threads used to perform this partition query.
   *
   * Modify the configured number of threads that should be used to execute this
   * query.
   *
   * \param newCount The new number of threads.
   * \sa getThreadCount()
   */
  virtual void setThreadCount(int newCount) = 0;
};


/*!
 * \fn PartitionQuery * createPQuery(void)
 *
 * \brief PartitionQuery instance generator
 *
 * Creates an instance of the PartitionQuery class with the currently underlying
 * implementation.
 *
 * \return Pointer to a new PartitionQuery instance.
 */
PartitionQuery * createPQuery(void);


/////////////////////////////////
// The ReachabilityQuery class //
/////////////////////////////////

/*!
 * \brief Representation class for reachability queries on a graph.
 *
 * This class enforces an interface for implementations of this library. It
 * describes a minimal API for high-level manipulations.
 */
class ReachabilityQuery : public Query {
// Function members
public:
  ////////////
  // Access //
  ////////////

  /*!
   * \brief Get the source node of a reachability query.
   *
   * Retrieve the source node that is currently associated with this
   * reachability query.
   *
   * \return Pointer to the Vertex representing the source node of the query.
   *
   * \sa getTarget()
   */
  virtual Vertex * getSource(void) const = 0;

  /*!
   * \brief Get the target node of a reachability query.
   *
   * Retrieve the target node that is currently associated with this
   * reachability
   * query.
   *
   * \return Pointer to the Vertex representing the target node of the query.
   *
   * \sa getSource()
   */
  virtual Vertex * getTarget(void) const = 0;

  /*!
   * \brief Get the answer associated with this reachability query.
   *
   * Retrieve the answer given to this reachability query. The result is of
   * course invalid if the query has not yet been processed.
   *
   * \return Boolean indicating if there exists a path from the source node to
   * the target node associated with this query.
   *
   * \sa Graph::pushQuery() and Graph::pullQuery()
   */
  virtual bool getAnswer(void) const = 0;

  /*!
   * \brief Get the SearchMethod specified for this reachability query.
   *
   * Retrieve the SearchMethod that is registered for this reachability query
   * and that should be used when processing the query.
   *
   * \return The currently registered SearchMethod for this query.
   *
   * \sa setMethod()
   */
  virtual SearchMethod getMethod(void) const = 0;

  ///////////////////
  // Modifications //
  ///////////////////

  /*!
   * \brief Set the source node for this reachability query.
   *
   * Modify the node that is used as source for this reachability query.
   *
   * \sa setTarget()
   */
  virtual void setSource(Vertex * sourceVertex) = 0;

  /*!
   * \brief Set the target node for this reachability query.
   *
   * Modify the node that is used as target for this reachability query.
   *
   * \sa setSource()
   */
  virtual void setTarget(Vertex * targetVertex) = 0;

  /*!
   * \brief Set the SearhMethod that should be used for this reachability query.
   *
   * Register a new SearchMethod to this reachability query that should be used
   * when processing this query.
   *
   * \sa getMethod()
   */
  virtual void setMethod(SearchMethod value) = 0;
};


/*!
 * \fn ReachabilityQuery * createRQuery(void)
 *
 * \brief ReachabiliyQuery instance generator
 *
 * Creates an instance of the ReachabilityQuery class with the currently
 * underlying implementation.
 *
 * \return Pointer to a new ReachabilityQuery instance.
 */
ReachabilityQuery * createRQuery(void);


#endif // GRAPH_UTILITIES_QUERIES
