#ifndef GRAPH_UTILITIES_VERTEX
#define GRAPH_UTILITIES_VERTEX

#include <set>
#include <stack>
#include <vector>

using namespace std;


// User-data abstract interface and implementation classes

class UserDataInterface {
public:
  virtual ~UserDataInterface(void) = default;

  virtual UserDataInterface * clone(void) const = 0;
  virtual void merge(const UserDataInterface * source) = 0;
};


template<class UserDataImpl>
class UserData : public UserDataInterface {
public:
  virtual UserDataInterface * clone(void) const;
};


// Vertex class

class Vertex {
// Type members
public:
  typedef vector<Vertex *> Array;
  typedef set<Vertex *> Set;
  typedef stack<Vertex *> Stack;
  typedef vector<Set *> PartitionArray;


// Function members
public:
  // Constructor & Destructor
  Vertex(void) = default;
  virtual ~Vertex(void) = default;

  // Remove copy & move constructors
  Vertex(const Vertex&) = delete;
  Vertex(Vertex&&) = delete;
  Vertex& operator=(const Vertex&) = delete;
  Vertex& operator=(Vertex&&) = delete;

  // Modificator methods
  virtual void setWeight(int newWeight) = 0;
  virtual bool addPredecessor(Vertex * predecessor, int weight = 1) = 0;
  virtual bool addSuccessor(Vertex * successor, int weight = 1) = 0;
  virtual bool removePredecessor(Vertex * predecessor) = 0;
  virtual bool removeSuccessor(Vertex * successor) = 0;
  virtual void clearPredecessors(void) = 0;
  virtual void clearSuccessors(void) = 0;

  // Access methods
  virtual int getId(void) const = 0;
  virtual int getWeight(void) const = 0;
  virtual Vertex * getPredecessor(int index) const = 0;
  virtual Vertex * getSuccessor(int index) const = 0;
  virtual int getPredecessorCount(void) const = 0;
  virtual int getSuccessorCount(void) const = 0;
  virtual int getPredecessorWeight(const Vertex * predecessor) const = 0;
  virtual int getSuccessorWeight(const Vertex * successor) const = 0;
  virtual int getPredecessorWeight(int index) const = 0;
  virtual int getSuccessorWeight(int index) const = 0;

  // User data management
  virtual void setUserData(UserDataInterface * newData) = 0;
  virtual UserDataInterface * getUserData(void) const = 0;
};


#endif // GRAPH_UTILITIES_VERTEX
