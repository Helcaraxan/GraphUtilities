#ifndef GRAPH_UTILITIES_GRAPH
#define GRAPH_UTILITIES_GRAPH

#include <map>

#include "graph-utilities/vertex.hpp"
#include "graph-utilities/queries.hpp"
#include "graph-utilities/metis-extra.hpp"

using namespace std;


// Graph class

class Graph {
// Local types
public:
  typedef enum {
    PreOrder,
    PostOrder
  } TraversalMethod;


// Function members
public:
  // Constructor & Destructor
  Graph(void) = default;
  virtual ~Graph(void) = default;

  // Remove copy & move constructors
  Graph(const Graph&) = delete;
  Graph(Graph&&) = delete;
  Graph& operator=(const Graph&) = delete;
  Graph& operator=(Graph&&) = delete;

  // Serialization methods
  virtual void printToFile(const char * fileName, bool weights = false) = 0;

  // Vertex and edge manipulation methods
  virtual Vertex * addVertex(int weight = 0) = 0;
  virtual void removeVertex(Vertex * vertex) = 0;
  virtual bool addEdge(Vertex * source, Vertex * target, int weight = 0) = 0;
  virtual bool removeEdge(Vertex * source, Vertex * target) = 0;

  // Vertex index methods
  virtual IndexMethod getIndexMethod(void) const = 0;
  virtual void setIndexMethod(IndexMethod newMethod) = 0;

  // Graph traversal methods
  virtual Vertex * getNextDFS(bool postOrder, bool reverse) = 0;

  // Graph manipulation methods
  virtual Vertex * mergeVertices(const Vertex::Set &vertexSet) = 0;
  virtual bool isCondensed(void) const = 0;
  virtual bool isDAG(void) = 0;
  virtual void condenseToDAG(const char * correspondanceFile = NULL) = 0;
  virtual const Vertex::PartitionArray& getSCCs(void) = 0;

  // Query management
  virtual void enableQueries(void) = 0;
  virtual void disableQueries(void) = 0;
  virtual void pushQuery(Query * query) = 0;
  virtual Query * pullResult(void)  = 0;

  // General queries
  virtual graph_t * getMetisGraph(void) = 0;
  virtual Vertex * getVertex(int id) const = 0;
  virtual unsigned int getVertexCount(void) const = 0;
  virtual unsigned int getEdgeCount(void) const = 0;

  // Partition-related methods
  virtual int getPartitionCount(void) const = 0;
  virtual const Vertex::PartitionArray * getPartitionSet(int count) const = 0;

  // Graph coarsening
  virtual Graph * coarsen(CoarsenMethod method, int factor, int secondaryFactor,
      map<int, int> &vertexMap) = 0;

  // Statistics
  virtual bool getStatisticsEnabled(void) = 0;
  virtual void printStatistics(ostream &stream) = 0;

  // Benchmarking
  virtual bool getBenchmarksEnabled(void) = 0;
  virtual void printBenchmarks(ostream &stream) = 0;
};


// Generator function (necessary as Graph has no constructor)
Graph * createEmptyGraph(void);


// Parser functions

Graph * parseDotFile(const char * fileName, bool noDoubleEdges = false);
Graph * parseGraFile(const char * fileName, bool noDoubleEdges = false);


#endif // GRAPH_UTILITIES_GRAPH
