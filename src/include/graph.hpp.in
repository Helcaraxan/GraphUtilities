/*
 * graph.hpp
 */

/* Forward declarations */
class Edge;
class Vertex;
class Graph;


#ifndef GRAPH_HPP
#define GRAPH_HPP

#include <set>
#include <list>
#include <mutex>
#include <stack>
#include <atomic>
#include <thread>
#include <vector>
#include <condition_variable>

#include <papi.h>
#include <tbb/concurrent_queue.h>

#include "graph-utilities/queries.hpp"
#include "graph-utilities/support.hpp"
#include "graph-utilities/metis-extra.hpp"

// Let cmake choose which options are enabled
#cmakedefine ENABLE_STATISTICS
#cmakedefine ENABLE_BENCHMARKS
#cmakedefine ENABLE_TLS
#cmakedefine ENABLE_COARSEN_STATISTICS

// Let cmake choose the maximum number of parallel queries
#define AUTO_THRESHOLD ${AUTO_THRESHOLD}


using namespace std;


// Semaphore class (passive wait variant)

class semaphore {
private:
  mutex mtx;
  condition_variable cv;
  atomic<int> count{0};

public:
  // Increment the counter value
  void post(void);

  // Wait for a post to the semaphore
  void wait(void);
};


// Spin-semaphore class (passive wait variant)
class spin_semaphore {
private:
  mutex mtx;
  atomic<int> maxIdx{0};
  atomic<int> currIdx{0};
  atomic<int> overflow{0};
  atomic<int> members{0};
  condition_variable * cvs = NULL;

public:
  void initialize(int memberCount);

  void reset(void);

  void post(void);

  void wait(void);
};


// The global slave function that performs queries

void queryWorker(Graph * graph, int threadId);


// Forward declaration of the Graph classes and global variables

class Vertex;
class Graph;

#ifdef ENABLE_TLS
thread_local vector<uint64_t> * DFSId = new vector<uint64_t>();
#endif


// Class declarations

class Vertex {
friend class Graph;

// Local types
public:
  typedef vector<Vertex *>::iterator iterator;


// Data members
public:
  int id;
  int weight;


private:
  // Reachability data
  int orderLabel = -1;
  int reverseOrderLabel = -1;
  int inVisits = 0;
  int outVisits = 0;
#ifndef ENABLE_TLS
  uint64_t * DFSId = NULL;
#endif // ENABLE_TLS

  Vertex * firstVisit = NULL;

  // Partioning data
  int partitionID = 0;

  // General data
  int predecessorCount = 0;
  int successorCount = 0;
  vector<Vertex *> predecessors;
  vector<int> predecessorWeights;
  vector<Vertex *> successors;
  vector<int> successorWeights;


// Function members
public:
  // Constructors & Destructor
#ifdef ENABLE_TLS
  Vertex(int i, int w = 1) : id(i), weight(w) {
    DFSId->push_back(0);
  }
#else // ENABLE_TLS
  Vertex(int tc, int i, int w = 1) : id(i), weight(w) {
    DFSId = new uint64_t[tc];
  }
#endif // ENABLE_TLS

  ~Vertex(void) {
#ifndef ENABLE_TLS
    delete[] DFSId;
#endif // ENABLE_TLS
  }

  // Modificators
  bool addPredecessor(Vertex * pred, int weight = 1);
  bool addSuccessor(Vertex * succ, int weight = 1);
  bool removePredecessor(Vertex * pred);
  bool removeSuccessor(Vertex * succ);
  void clearPredecessors(void);
  void clearSuccessors(void);

  // Access
  Vertex * getPredecessor(int idx) const;
  Vertex * getSuccessor(int idx) const;
  int getPredecessorCount(void) const;
  int getSuccessorCount(void) const;
  int getPredecessorWeight(Vertex * pred) const;
  int getSuccessorWeight(Vertex * succ) const;
  int getPredecessorWeight(int idx) const;
  int getSuccessorWeight(int idx) const;

  // Iterators
  iterator predecessors_begin(void);
  iterator predecessors_end(void);
  iterator successors_begin(void);
  iterator successors_end(void);


private:
  // Indexing
#ifdef ENABLE_TLS
  void setDFSId(uint64_t newId);
  uint64_t getDFSId(void) const;
#else // ENABLE_TLS
  void setDFSId(int idx, uint64_t newId);
  uint64_t getDFSId(int idx) const;
#endif // ENABLE_TLS
  pair<bool, Vertex *> getNextDFS(Vertex * origin, bool postOrder, bool reverse);

  // Modificators
  void addPredecessorUnsafe(Vertex * pred, int weight = 1);
  void addSuccessorUnsafe(Vertex * succ, int weight = 1);
};


class Graph {
friend void queryWorker(Graph * graph, int id);

// Local types
public:
  typedef vector<set<Vertex *> *> PartitionSet;
  typedef enum {
    PreOrder,
    PostOrder
  } TraversalMethod;


// Data members
protected:
  // Reachability data
  bool indexed = false;
  IndexMethod indexMethod = UndefinedIndexMethod;

  // General data
  bool condensed = false;
  bool enabled = false;
  unsigned int vertexCount = 0;
  unsigned int edgeCount = 0;
  vector<Vertex *> vertices;
  vector<Vertex *> sources;
  vector<Vertex *> sinks;

  // Global timestamp to distinguish between condensation DFSs
  uint64_t globalTimestamp;


private:
  /* Reachability data */
  // Indexing
  mutex indexMutex;

  // Condensing
  vector<set<Vertex *> *> sccSets;

  // Queries
  mutex methodMutex;
  tbb::concurrent_queue<Query *> jobQueue;
  atomic<SearchMethod> searchMethod{UndefinedSearchMethod};

  // Results
  tbb::concurrent_queue<Query *> resultQueue;

  // Reordering vectors
  vector<Vertex *> successorQueue;
  vector<Vertex *> predecessorQueue;

  /* Partitioning data */
  // General
  int partitionCount = 0;
  atomic<PartitionMethod> partitionMethod{UndefinedPartitionMethod};

  /* General data */
  // Multi-threading
  int threadCount = 0;
  int activeThreads = 0;
  bool noQueries = false;
  bool threadShutdown = false;
  bool threadsActive = false;
  mutex queryWaitMutex;
  mutex globalWaitMutex;
  condition_variable queryWaitCondition;
  condition_variable globalWaitCondition;
  vector<thread *> queryThreads;

#ifdef ENABLE_STATISTICS
  /* Statistics data */
  // Counters
  uintmax_t queryCount = 0;
  uintmax_t positiveQueryCount = 0;
  uintmax_t negativeQueryCount = 0;
  uintmax_t shortNegativeQueryCount = 0;

  // DFS overhead statistics
  mutex statisticsMutex;
  double positiveQueryOverhead = 0.0L;
  double negativeQueryOverhead = 0.0L;
#endif // ENABLE_STATISTICS

#ifdef ENABLE_BENCHMARKS
  /* Benchmark data */
  // Counters
  long long queryNumber{0};
  long long cyclesSpentIndexing{0};
  long long cyclesSpentQuerying{0};

  // Multi-threading
  mutex benchmarkMutex;
#endif // ENABLE_BENCHMARKS


// Function members
public:
  // Constructors & Destructor
  Graph(int numberOfThreads = 2) {
    if (numberOfThreads < 2)
      numberOfThreads = 2;

    enableGraph(numberOfThreads);
  }

  ~Graph() {
    disableGraph();

    for (auto it = vertices.begin(), end = vertices.end(); it != end; ++it)
      if (*it != NULL)
        delete *it;
  }

  // Parser functions
  static Graph * createFromDotFile(const char * fileName, bool noDoubleEdges = false);
  static Graph * createFromGraFile(const char * fileName, bool noDoubleEdges = false);

  // Serialization
  void printToFile(fstream &printStream, bool withWeights = false);

  // Modificators
  Vertex * addVertex();
  void removeVertex(Vertex * v);
  void mergeVertices(set<Vertex *> &s);
  bool addEdge(Vertex * s, Vertex * t, int weight = 1);
  bool removeEdge(Vertex * s, Vertex * t);
  void setIndexMethod(IndexMethod newMethod);
  bool condenseGraph(bool dummy = false, bool dumpSCC = false);

  // Access
  graph_t * getMetisGraph(void);
  unsigned int getEdgeCount(void) const;
  unsigned int getVertexCount(void) const;
  Vertex * getVertexFromId(int id) const;
  IndexMethod getIndexMethod(void) const;
  Vertex * getNextDFS(bool postOrder, bool reverse);

  // Checks
  void verifyVertexIds(void) const;

  // Reachability queries
  void pushQuery(Query * query);
  Query * pullResult(void);
  void endOfQueries(void);

  // Partitioning queries
  int getPartitionCount(void);
  PartitionSet * getPartitionSet(int count);

  // Graph coarsening
  Graph * coarsen(CoarsenMethod method, int factor, int secondaryFactor, map<int, int> &vertexMap);

  // Statistics
  bool statisticsAreEnabled(void);
  uintmax_t getQueryCount(void);
  uintmax_t getPositiveQueryCount(void);
  uintmax_t getNegativeQueryCount(void);
  uintmax_t getShortNegativeQueryCount(void);
  double getPositiveQueryOverhead(void);
  double getNegativeQueryOverhead(void);
  void printStatistics(ostream &os);

  // Benchmarking
  bool benchmarksAreEnabled(void);
  long long getQueryNumber(void);
  long long getCyclesSpentIndexing(void);
  long long getCyclesSpentQuerying(void);
  void printBenchmarks(ostream &os);


protected:
  // Indexing
  void labelVertices(bool reverse);
  void indexGraph(void);

  // Graph maintenance
  void discoverExtremities(void);

  // Multi-threading
  void startWorker(void);
  void stopWorker(void);
  void startGlobalOperation(void);
  void stopGlobalOperation(void);
  void startWorkers(void);
  void enableGraph(int numberOfThreads);
  void disableGraph(void);


private:
  // Maintenance
  Vertex * addVertexUnsafe(int threadCount);
  bool addEdgeUnsafe(Vertex * source, Vertex * target, int weight = 1);

  // Internal condense function
  int sccVertexVisit(Vertex * target, int label, vector<pair<int, int>> &labels,
      stack<Vertex *> &unclassified, stack<Vertex *> &undetermined);

  // Internal reachability query functions
#ifdef ENABLE_TLS
  void processReachabilityQuery(Query * query);
  void areConnectedDFS(ReachabilityQuery * query);
  void areConnectedBBFS(ReachabilityQuery * query);
  void areConnectedNoLabels(ReachabilityQuery * query);
#else //  ENABLE_TLS
  void processReachabilityQuery(int threadId, Query * query);
  void areConnectedDFS(ReachabilityQuery * query, int threadId);
  void areConnectedBBFS(ReachabilityQuery * query, int threadId);
  void areConnectedNoLabels(ReachabilityQuery * query, int threadId);
#endif //  ENABLE_TLS
  SearchMethod getMethod(void);
  void setMethod(SearchMethod method);

  // Internal partitioning query functions
#ifdef ENABLE_TLS
  void processPartitionQuery(Query * query);
#else // ENABLE_TLS
  void processPartitionQuery(int threadId, Query * query);
#endif // ENABLE_TLS

  // Internal coarsening functions
  bool addToReadySet(Vertex * curr, set<Vertex *> &readySet, set<Vertex *> &processedSet);
  Graph * coarsenGreedy(int factor, map<int, int> &vertexMap);

#ifdef ENABLE_STATISTICS
  // Internal statistic maintenance
  void registerQueryStatistics(ReachabilityQuery * query);
#endif // ENABLE_STATISTICS
};

#endif // GRAPH_HPP
