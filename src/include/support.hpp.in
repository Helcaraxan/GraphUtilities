#ifndef SUPPORT_HPP
#define SUPPORT_HPP

#include <iostream>

#include "unistd.h"
#include "sys/ioctl.h"

using namespace std;

extern int batchFlag;
static int progressBarFinish = 1;
static int terminalWidth = 0;
static int progressBarTitleWidth = 7;
static string progressBarTitle = "";


inline void configureProgressBar(string * title, int finish) {
  if (finish != 0)
    progressBarFinish = finish;

  if (title) {
    progressBarTitle = *title;
    progressBarTitleWidth = title->length() + 7;
  }
}

inline void resultProgressBar(int progress) {
  int intRatio;
  int refreshModulo;
  double floatRatio;

  if (batchFlag == 1)
    return;

  if (terminalWidth == 0) {
    struct winsize w;
    ioctl(STDOUT_FILENO, TIOCGWINSZ, &w);

    terminalWidth = w.ws_col;
  }

  refreshModulo = progressBarFinish / (terminalWidth - progressBarTitleWidth);

  if (progress == progressBarFinish) {
    cout << progressBarTitle << "100% [" << string(terminalWidth - progressBarTitleWidth, '=');
    cout << "]\r" << flush;
    progressBarTitle.clear();
    return;
  }

  if (progress % refreshModulo != 0)
    return;

  intRatio = progress / refreshModulo;
  floatRatio = ((double) progress) / ((double) progressBarFinish);

  cout << progressBarTitle;
  cout.width(3);
  cout << right << (int) (floatRatio * 100) << "% [";

  string completeString(intRatio, '=');
  cout << string(intRatio, '=') << string(terminalWidth - progressBarTitleWidth - intRatio, ' ');
  cout << "]\r" << flush;
}



#endif // SUPPORT_HPP
