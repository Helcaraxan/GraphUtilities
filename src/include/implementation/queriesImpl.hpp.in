#ifndef QUERIES_IMPL_HPP
#define QUERIES_IMPL_HPP

// Forward declaration
class CoarsenQueryImpl;
class PartitionQueryImpl;
class ReachabilityQueryImpl;


#include "graph-utilities/queries.hpp"

#include "graph-utilities/implementation/defs.hpp"
#include "graph-utilities/implementation/graphImpl.hpp"

using namespace std;


// CoarsenQuery Implementation class

class CoarsenQueryImpl : public CoarsenQuery {
// Data members
private:
  bool error = false;
  int factor = 1;
  int secondaryFactor = 1;
  CoarsenMethod method = Greedy;
  map<int, int> vertexMap;
  GraphImpl * coarsenedGraph = nullptr;


// Function members
public:
  // Constructors & Destructors
  /* Interface functions */
  // Access
  bool getError(void) const;
  int getFactor(void) const;
  int getSecondaryFactor(void) const;
  Graph * getAnswer(void);
  CoarsenMethod getMethod(void) const;
  map<int, int>& getMap(void);

  // Modifications
  void setError(bool value);
  void setFactor(int newFactor);
  void setSecondaryFactor(int newFactor);
  void setMethod(CoarsenMethod newMethod);

  /* Implementation methods */
  // Modifications
  void setAnswer(GraphImpl * newGraph);
};


// PartitionQuery Implementation class

class PartitionQueryImpl : public PartitionQuery {
// Data members
private:
  bool error = false;
  PartitionImpl * partition = nullptr;
  PartitionMethod method = Convexify;


// Function members
public:
  /* Interface functions */
  // Access
  bool getError(void) const;
  PartitionMethod getMethod(void) const;
  const Partition * getPartition(void) const;

  // Modifications
  void setMethod(PartitionMethod newMethod);

  /* Implementation methods */
  // Modifications
  void setError(bool value);
  void setPartition(PartitionImpl * part);
};


// ReachabilityQuery Implementation class

class ReachabilityQueryImpl : public ReachabilityQuery {
// Local types
public:
  typedef struct {
    mutex guard;
    vector<pair<ReachabilityQueryImpl *, uint64_t> > results;
    condition_variable signal;
  } InternalQueue;


// Data members
private:
  VertexImpl * source = nullptr;
  VertexImpl * target = nullptr;
  InternalQueue * internal = nullptr;
  atomic<bool> answer{false};
  atomic<bool> error{false};
  atomic<bool> cancel{false};
  atomic<SearchMethod> method{UndefinedSearchMethod};

#if defined(ENABLE_STATISTICS)
  VertexImpl::Array path;
  atomic<uintmax_t> searchedNodes{0};
#endif // ENABLE_STATISTICS


// Function members
public:
  ReachabilityQueryImpl(void) = default;
  ReachabilityQueryImpl(VertexImpl * sourceVertex, VertexImpl * targetVertex,
      SearchMethod searchMethod = UndefinedSearchMethod) :
    source(sourceVertex),
    target(targetVertex)
  {
    method.store(searchMethod, memory_order_release);
  }

  ~ReachabilityQueryImpl(void) {
#if defined(ENABLE_STATISTICS)
    path.clear();
#endif // ENABLE_STATISTICS
  }

  /* Interface methods */
  // Access
  bool getError(void) const;
  Vertex * getSource(void) const;
  Vertex * getTarget(void) const;
  bool getAnswer(void) const;
  SearchMethod getMethod(void) const;

  // Modifications
  void setSource(Vertex * sourceVertex);
  void setTarget(Vertex * targetVertex);
  void setMethod(SearchMethod value);

  /* Implementation methods */
  // Access
  VertexImpl * getSourceI(void) const;
  VertexImpl * getTargetI(void) const;
  bool getCancel(void) const;
  InternalQueue * getInternal(void) const;
#if defined(ENABLE_STATISTICS)
  uintmax_t getSearchedNodes(void);
  VertexImpl::Array& getPath(void);
#endif // ENABLE_STATISTICS

  // Modifications
  void setError(bool value);
  void setAnswer(bool value);
  void setCancel(bool value);
  void setInternal(InternalQueue * value);
#if defined(ENABLE_STATISTICS)
  void addSearchedNodes(void);
#endif // ENABLE_STATISTICS

};

#endif // QUERIES_IMPL_HPP
