#ifndef SEMAPHORE_HPP
#define SEMAPHORE_HPP

#include <mutex>
#include <atomic>
#include <condition_variable>

using namespace std;


// Semaphore class (passive wait variant)

class semaphore {
private:
  mutex mtx;
  condition_variable cv;
  atomic<int> count{0};

public:
  // Increment the counter value
  void post(void);

  // Wait for a post to the semaphore
  void wait(void);
};


// Spin-semaphore class (passive wait variant)
class spin_semaphore {
private:
  mutex mtx;
  atomic<int> maxIdx{0};
  atomic<int> currIdx{0};
  atomic<int> overflow{0};
  atomic<int> members{0};
  condition_variable * cvs = NULL;

public:
  void initialize(int memberCount);

  void reset(void);

  void post(void);

  void wait(void);
};


#endif // SEMAPHORE_HPP
