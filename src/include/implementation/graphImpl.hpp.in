#ifndef GRAPH_IMPL_HPP
#define GRAPH_IMPL_HPP

#include <mutex>
#include <queue>
#include <stack>
#include <atomic>
#include <thread>
#include <condition_variable>

#include <tbb/concurrent_queue.h>


// Forward declaration
class GraphImpl;


#include "graph-utilities/graph.hpp"

#include "graph-utilities/implementation/defs.hpp"
#include "graph-utilities/implementation/vertexImpl.hpp"
#include "graph-utilities/implementation/queriesImpl.hpp"

using namespace std;


// Hypergraph structure for interfacing with the PaToH library

typedef struct {
  int cellCount = 0;
  int netCount = 0;
  vector<int> xpins;
  vector<int> pins;
  map<int, int> forwardMap;
  vector<int> backwardMap;
} HGraph;


// Graph Implementation class

class GraphImpl : public Graph {
// Friends
friend void queryWorker(GraphImpl * graph, int id);
friend Graph * parseDotFile(const char * fileName, bool noDoubleEdges);
friend Graph * parseGraFile(const char * fileName, bool noDoubleEdges);


// Data members
private:
  // General data
  bool condensed = false;
  unsigned int vertexCount = 0;
  unsigned int edgeCount = 0;
  VertexImpl::Array vertices;
  VertexImpl::Array sources;
  VertexImpl::Array sinks;

  // Reachability data
  bool indexed = false;
  IndexMethod indexMethod = UndefinedIndexMethod;

  // Global timestamp to distinguish between condensation DFSs
  uint64_t globalTimestamp = 0;

  // Indexing
  mutex indexMutex;

  // Condensing
  Vertex::PartitionArray sccSets;

  // Queries
  mutex methodMutex;
  tbb::concurrent_queue<Query *> jobQueue;
  atomic<SearchMethod> searchMethod{UndefinedSearchMethod};

  // Results
  tbb::concurrent_queue<Query *> resultQueue;

  // Reordering vectors
  VertexImpl::Array successorQueue;
  VertexImpl::Array predecessorQueue;

  // Partitioning data
  PartitionMethod partitionMethod{UndefinedPartitionMethod};
  vector<Vertex::PartitionArray *> partitions;

  // Multi-threading
  int threadCount = 0;
  int activeThreads = 0;
  bool noQueries = false;
  bool threadShutdown = true;
  mutex queryWaitMutex;
  mutex globalWaitMutex;
  condition_variable queryWaitCondition;
  condition_variable globalWaitCondition;
  vector<thread *> queryThreads;
#if defined(ENABLE_STATISTICS) || defined(ENABLE_BENCHMARKS)
  mutex counterMutex;
#endif // ENABLE_ STATISTICS || ENABLE_BENCHMARKS

  // Counters
#if defined(ENABLE_STATISTICS) || defined(ENABLE_BENCHMARKS)
  uintmax_t queryCount = 0;
#endif // ENABLE_ STATISTICS || ENABLE_BENCHMARKS
#if defined(ENABLE_STATISTICS)
  uintmax_t positiveQueryCount = 0;
  uintmax_t negativeQueryCount = 0;
  uintmax_t shortNegativeQueryCount = 0;
  double positiveQueryOverhead = 0.0L;
  double negativeQueryOverhead = 0.0L;
#endif // ENABLE_STATISTICS
#if defined(ENABLE_BENCHMARKS)
  long long cyclesSpentIndexing = 0;
  long long cyclesSpentQuerying = 0;
#endif // ENABLE_BENCHMARKS


// Function members
public:
  GraphImpl(int numberOfThreads = 2) {
    threadCount = (numberOfThreads > 2) ? numberOfThreads : 2;
  }

  ~GraphImpl(void) {
    disableQueries();

    for (auto it = vertices.begin(), end = vertices.end(); it != end; ++it)
      if (*it != nullptr)
        delete *it;
  }

  /* Interface methods */
  // Serialization methods
  void printToFile(const char * fileName, bool weights = false);

  // Vertex and edge manipulation methods
  Vertex * addVertex(int weight = 1);
  void removeVertex(Vertex * vertex);
  bool addEdge(Vertex * source, Vertex * target, int weight = 0);
  bool removeEdge(Vertex * source, Vertex * target);

  // Vertex index methods
  IndexMethod getIndexMethod(void) const;
  void setIndexMethod(IndexMethod newMethod);

  // Graph traversal methods
  Vertex * getNextDFS(TraversalOrder order = NAOrder,
      TraversalDirection direction = NADirection);

  // Graph manipulation methods
  Vertex * mergeVertices(const Vertex::Set &vertexSet);
  bool isCondensed(void) const;
  bool isDAG(void);
  void condenseToDAG(const char * correspondanceFile = nullptr);
  const Vertex::PartitionArray& getSCCs(void);

  // Query management
  void enableQueries(void);
  void disableQueries(void);
  void setThreadCount(int count);
  bool pushQuery(Query * query);
  Query * pullQuery(bool block = false);

  // General queries
  Vertex * getVertex(int id) const;
  unsigned int getVertexCount(void) const;
  unsigned int getEdgeCount(void) const;
  bool hasEdge(int source, int target) const;
  bool hasEdge(const Vertex * source, const Vertex * target) const;

  // Partition-related methods
  const Partition * computeConvexPartition(vector<int>& schedule) const;
  bool checkSchedule(vector<int>& schedule) const;
  double getPartitionCost(const Partition * partition, int memorySize,
      IOComplexityType type, const char * tileFile = nullptr) const;

  // Statistics
  bool getStatisticsEnabled(void);
  void printStatistics(ostream &stream);

  // Benchmarking
  bool getBenchmarksEnabled(void);
  void printBenchmarks(ostream &stream);


  /* Implementation methods */
  // Indexing
  void setIndexed(bool value);
  void labelVertices(TraversalDirection direction);
  void indexGraph(void);

  // Graph maintenance
  void setCondensed(bool value);
  void discoverExtremities(void);
  void verifyVertexIds(void) const;
  Vertex::PartitionArray& getSCCsI(void);

  // Multi-threading
  int getThreadCount(void) const;
  void startWorker(void);
  void stopWorker(void);
  void startGlobalOperation(void);
  void stopGlobalOperation(void);

  // Maintenance
  VertexImpl * addVertexUnsafe(int weight = 1);
  bool addEdgeUnsafe(VertexImpl * source, VertexImpl * target, int weight = 1);
  GraphImpl * getSubGraph(Vertex::IdSet& idSet, vector<int>& idMap) const;

  // General queries
  VertexImpl::Array& getSourceVertices(void);
  VertexImpl::Array& getSinkVertices(void);

  // Internal reachability query functions
#if defined(ENABLE_TLS)
  void processReachabilityQuery(ReachabilityQueryImpl * query);
  void areConnectedDFS(ReachabilityQueryImpl * query);
  void areConnectedBBFS(ReachabilityQueryImpl * query);
  void areConnectedNoLabels(ReachabilityQueryImpl * query);
#else //  ENABLE_TLS
  void processReachabilityQuery(ReachabilityQueryImpl * query, int threadId);
  void areConnectedDFS(ReachabilityQueryImpl * query, int threadId);
  void areConnectedBBFS(ReachabilityQueryImpl * query, int threadId);
  void areConnectedNoLabels(ReachabilityQueryImpl * query, int threadId);
#endif //  ENABLE_TLS
  SearchMethod getMethod(void) const;
  void setMethod(SearchMethod method);

  // Internal partitioning query functions
#if defined(ENABLE_TLS)
  void processPartitionQuery(PartitionQueryImpl * query);
#else // ENABLE_TLS
  void processPartitionQuery(PartitionQueryImpl * query, int threadId);
#endif // ENABLE_TLS
  void computePartitionNodeCosts(IOComplexityType type,
      PartitionNodeImpl * node, Vertex::IdSet * group = nullptr) const;
  HGraph * getHGraph(Vertex::IdSet& idSet) const;
  void convBisect(PartitionNodeImpl * parent);
  void maxDistBisect(PartitionNodeImpl * parent, Vertex::IdSet * sourceSet,
      Vertex::IdSet * sinkSet);
  void partitionConvexify(PartitionQueryImpl * query);
  void partitionMaxDistance(PartitionQueryImpl * query);

  // Graph coarsening
  /*!
   * \brief Perform a coarsening on the graph.
   *
   * Creates a new graph that is a coarsened version of the current graph.
   *
   * \param method Algorithmic method used to perform the coarsening.
   * \param factor To be defined.
   * \param secondaryFactor To be defined.
   * \param vertexMap Reference to a map where the correspondance between nodes
   * of the original graph and the coarsened version is recorded.
   *
   * \return Pointer to a new Graph instance containing the coarsened graph.
   */
#if defined(ENABLE_TLS)
  void processCoarsenQuery(CoarsenQueryImpl * query);
#else // ENABLE_TLS
  void processCoarsenQuery(CoarsenQueryImpl * query, int threadId);
#endif // ENABLE_TLS
  bool addToReadySet(VertexImpl * curr, VertexImpl::Set &readySet,
      VertexImpl::Set &processedSet);
  GraphImpl * coarsenGreedy(CoarsenQueryImpl * query);

#if defined(ENABLE_STATISTICS)
  // Internal statistics methods
  uintmax_t getQueryCount(void);
  uintmax_t getPositiveQueryCount(void);
  uintmax_t getNegativeQueryCount(void);
  uintmax_t getShortNegativeQueryCount(void);
  double getPositiveQueryOverhead(void);
  double getNegativeQueryOverhead(void);
  void registerQueryStatistics(ReachabilityQuery * query);
#endif // ENABLE_STATISTICS

#if defined(ENABLE_BENCHMARKS)
  // Internal benchmark methods
  long long getCyclesSpentIndexing(void);
  long long getCyclesSpentQuerying(void);
#endif // ENABLE_BENCHMARKS
};


// The global slave function that performs queries

void queryWorker(GraphImpl * graph, int threadId);


// The worker function for graph partitioning

void partitionWorker(GraphImpl * graph);


#endif // GRAPH_IMPL_HPP
