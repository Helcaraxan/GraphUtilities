/*
 * graph.hpp
 */

/* Forward declarations */
class Edge;
class Vertex;
class Graph;


#ifndef GRAPH_HPP
#define GRAPH_HPP

#include <set>
#include <list>
#include <mutex>
#include <atomic>
#include <thread>
#include <vector>
#include <condition_variable>

#include <papi.h>

#include "queries.hpp"
#include "metis-extra.h"

// Let cmake choose which options are enabled
#cmakedefine ENABLE_RETRO_LABELS
#cmakedefine ENABLE_STATISTICS
#cmakedefine ENABLE_BENCHMARKS

// Let cmake choose the maximum number of parallel queries
#define MAX_THREADS ${MAX_THREADS}
#define AUTO_THRESHOLD ${AUTO_THRESHOLD}


using namespace std;


// Semaphore class (passive wait variant)

class semaphore {
private:
  mutex mtx;
  condition_variable cv;
  atomic<int> count{0};

public:
  // Increment the counter value
  void post(void);

  // Wait for a post to the semaphore
  void wait(void);
};


// Spin-semaphore class (passive wait variant)
class spin_semaphore {
private:
  mutex mtx;
  atomic<int> maxIdx{0};
  atomic<int> currIdx{0};
  atomic<int> overflow{0};
  atomic<int> members{0};
  condition_variable * cvs = NULL;

public:
  void initialize(int memberCount);

  void reset(void);

  void post(void);

  void wait(void);
};


void queryWorker(Graph * graph, int threadId);


// The Graph classes

class Vertex;
class Graph;


// Class declarations

class Vertex {
friend class Graph;

// Local types
public:
  typedef vector<Vertex *>::iterator iterator;


// Data members
public:
  int id;


private:
  // Reachability data
  int orderLabel = -1;
  int reverseOrderLabel = -1;
#ifdef ENABLE_RETRO_LABELS
  int retroOrderLabel = -1;
  int retroReverseOrderLabel = -1;
#endif // ENABLE_RETRO_LABELS

  int inVisits = 0;
  int outVisits = 0;
  atomic<uint64_t> DFSId[MAX_THREADS] = {{0}};

  Vertex * firstVisit = NULL;

  // Partioning data
  int partitionID = 0;

  // General data
  int predecessorCount = 0;
  int successorCount = 0;
  vector<Vertex *> predecessors;
  vector<Vertex *> successors;


// Function members
public:
  // Constructors & Destructor
  Vertex(int i) :
    id(i)
  {}

  ~Vertex(void) {
    for (auto it = predecessors.begin(), end = predecessors.end(); it != end; ++it)
      (*it)->removeSuccessor(this);

    for (auto it = successors.begin(), end = successors.end(); it != end; ++it)
      (*it)->removePredecessor(this);
  }

  // Modificators
  bool addPredecessor(Vertex * pred);
  bool addSuccessor(Vertex * succ);
  bool removePredecessor(Vertex * pred);
  bool removeSuccessor(Vertex * succ);

  // Access
  int getNumberOfPredecessors(void);
  int getNumberOfSuccessors(void);

  // Iterators
  iterator predecessors_begin(void);
  iterator predecessors_end(void);

  iterator successors_begin(void);
  iterator successors_end(void);


private:
  // Indexing
  void setDFSId(int idx, uint64_t id);
  uint64_t getDFSId(int idx);
  void visit(Vertex * pred, int method);
  Vertex * createPostOrder(vector<Vertex *> * postOrder, int method);
};


class Graph {
friend void queryWorker(Graph * graph, int id);

// Local types
public:
  typedef vector<set<Vertex *> *> PartitionSet;


// Data members
protected:
  // Reachability data
  bool indexed = false;
  IndexMethod indexMethod = UndefinedIndexMethod;

  // General data
  bool condensed = false;
  unsigned int edgeCount = 0;
  vector<Vertex *> vertices;
  vector<Vertex *> sources;
  vector<Vertex *> sinks;

  // Global timestamp to distinguish between condensation DFSs
  uint64_t globalTimestamp;


private:
  /* Reachability data */
  // Indexing
  mutex indexMutex;

  // Queries
  mutex jobMutex;
  mutex methodMutex;
  semaphore jobSemaphore;
  list<Query *> jobQueue;
  atomic<SearchMethod> searchMethod{UndefinedSearchMethod};

  // Results
  mutex resultMutex;
  mutex internalResultMutex;
  spin_semaphore internalResultSpinSemaphore;
  semaphore resultSemaphore;
  list<Query *> resultQueue;
  list<Query *> internalResultQueue;

  // Reordering vectors
  vector<Vertex *> successorQueue;
  vector<Vertex *> predecessorQueue;

  /* Partitioning data */
  // General
  int partitionCount = 0;
  atomic<PartitionMethod> partitionMethod{UndefinedPartitionMethod};

  /* General data */
  // Multi-threading
  int activeThreads = 0;
  bool noQueries = false;
  bool threadShutdown = false;
  mutex queryWaitMutex;
  mutex globalWaitMutex;
  condition_variable queryWaitCondition;
  condition_variable globalWaitCondition;
  thread queryThreads[MAX_THREADS];

#ifdef ENABLE_STATISTICS
  /* Statistics data */
  // Counters
  uintmax_t queryCount = 0;
  uintmax_t positiveQueryCount = 0;
  uintmax_t negativeQueryCount = 0;
  uintmax_t shortNegativeQueryCount = 0;

  // DFS overhead statistics
  mutex statisticsMutex;
  double positiveQueryOverhead = 0.0L;
  double negativeQueryOverhead = 0.0L;
#endif // ENABLE_STATISTICS

#ifdef ENABLE_BENCHMARKS
  /* Benchmark data */
  // Counters
  long long queryNumber{0};
  long long cyclesSpentIndexing{0};
  long long cyclesSpentQuerying{0};
  long long graphMemoryUsage{0};

  // Multi-threading
  mutex benchmarkMutex;
#endif // ENABLE_BENCHMARKS


// Function members
public:
  // Constructors & Destructor
  Graph(void) {
    PAPI_library_init(PAPI_VER_CURRENT);
    internalResultSpinSemaphore.initialize(MAX_THREADS);

    for (int i = 0; i < MAX_THREADS; i++)
      queryThreads[i] = thread(queryWorker, this, i);
  }

  ~Graph(void) {
    threadShutdown = true;

    for (int i = 0; i < MAX_THREADS; i++)
      jobSemaphore.post();

    for (int i = 0; i < MAX_THREADS; i++)
      queryThreads[i].join();

    internalResultSpinSemaphore.reset();

    for (auto it = jobQueue.begin(), end = jobQueue.end(); it != end; ++it) {
      if ((*it)->type == Reachability)
        (*it)->query.reachability.setError(true);
    }

    for (auto it = vertices.begin(), end = vertices.end(); it != end; ++it)
      delete *it;
  }

  // Parser functions
  static Graph * createFromDotFile(const char * fileName, bool noDoubleEdges = false);
  static Graph * createFromGraFile(const char * fileName, bool noDoubleEdges = false);

  // Modificators
  Vertex * addVertex(void);
  void removeVertex(Vertex * v);
  void mergeVertices(Vertex * s, Vertex * t);
  bool addEdge(Vertex * s, Vertex * t);
  bool removeEdge(Vertex * s, Vertex * t);
  void setIndexMethod(IndexMethod newMethod);

  // Access
  graph_t * getMetisGraph(void);
  unsigned int getEdgeCount(void);
  unsigned int getVertexCount(void);
  Vertex * getVertexFromId(int id);
  IndexMethod getIndexMethod(void);

  // Reachability queries
  void pushQuery(Query * query);
  Query * pullResult(void);
  void endOfQueries(void);

  // Partitioning queries
  int getPartitionCount(void);
  PartitionSet * getPartitionSet(int count);

  // Statistics
  bool statisticsAreEnabled(void);
  uintmax_t getQueryCount(void);
  uintmax_t getPositiveQueryCount(void);
  uintmax_t getNegativeQueryCount(void);
  uintmax_t getShortNegativeQueryCount(void);
  double getPositiveQueryOverhead(void);
  double getNegativeQueryOverhead(void);
  void printStatistics(ostream &os);

  // Benchmarking
  bool benchmarksAreEnabled(void);
  long long getQueryNumber(void);
  long long getCyclesSpentIndexing(void);
  long long getCyclesSpentQuerying(void);
  void printBenchmarks(ostream &os);


protected:
  // Indexing
  void labelVertices(bool retro, bool reverse);
  void indexGraph(void);

  // Graph maintenance
  void discoverExtremities(void);
  void condenseGraph(void);

  // Multi-threading
  void startQuery(void);
  void stopQuery(void);
  void startGlobalOperation(void);
  void stopGlobalOperation(void);


private:
  // Maintenance
  void condenseFromSource(Vertex * source);
  Vertex * addVertexUnsafe(void);
  bool addEdgeUnsafe(Vertex * source, Vertex * target);

  // Internal reachability query functions
  void processReachabilityQuery(int threadId, Query * query);
  void areConnectedDFS(ReachabilityQuery &query, int threadId, vector<Vertex *> &searchStack);
  void areConnectedBBFS(ReachabilityQuery &query, int threadId);
  void areConnectedNoLabels(ReachabilityQuery &query, int threadId);
  SearchMethod getMethod(void);
  void setMethod(SearchMethod method);

  // Internal partitioning query functions
  void processPartitionQuery(int threadId, Query * query);

#ifdef ENABLE_STATISTICS
  // Internal statistic maintenance
  void registerQueryStatistics(ReachabilityQuery &query);
#endif // ENABLE_STATISTICS
};

#endif // GRAPH_HPP
