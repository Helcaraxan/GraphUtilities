/*
 * graph.hpp
 */

/* Forward declarations */
class Edge;
class Vertex;
class Graph;


#ifndef GRAPH_HPP
#define GRAPH_HPP

#include <list>
#include <mutex>
#include <atomic>
#include <thread>
#include <vector>
#include <condition_variable>

// Let cmake choose which options are enabled
#cmakedefine ENABLE_RETRO_LABELS
#cmakedefine ENABLE_STATISTICS
#cmakedefine ENABLE_BENCHMARKS

// Let cmake choose the maximum number of parallel queries
#define MAX_THREADS ${MAX_THREADS}


using namespace std;


// Supplementary STL class for a semaphore

class semaphore {
private:
  mutex mtx;
  condition_variable cv;
  int count = 0;

public:
  void post(void) {
    unique_lock<mutex> lck(mtx);
    ++count;
    cv.notify_one();
  }

  void wait(void) {
    unique_lock<mutex> lck(mtx);
     while (count == 0) {
       cv.wait(lck);
     }
     count--;
  }
};


// The Graph classes

class Vertex;
class Graph;


void queryWorker(Graph * graph, int threadId);


// Class declarations

class Vertex {
friend class Graph;

// Local types
public:
  typedef vector<Vertex *>::iterator iterator;

// Data members
public:
  int id;

private:
  int orderLabel = -1;
  int reverseOrderLabel = -1;
#ifdef ENABLE_RETRO_LABELS
  int retroOrderLabel = -1;
  int retroReverseOrderLabel = -1;
#endif // ENABLE_RETRO_LABELS

  int inVisits = 0;
  int outVisits = 0;
  int DFSId[MAX_THREADS] = {0};

  Vertex * firstVisit = NULL;

  int predecessorCount = 0;
  int successorCount = 0;
  vector<Vertex *> predecessors;
  vector<Vertex *> successors;

// Function members
public:
  // Constructors & Destructor
  Vertex(int i) :
    id(i)
  {}

  ~Vertex(void) {
    for (auto it = predecessors.begin(), end = predecessors.end(); it != end; ++it)
      (*it)->removeSuccessor(this);

    for (auto it = successors.begin(), end = successors.end(); it != end; ++it)
      (*it)->removePredecessor(this);
  }

  // Modificators
  bool addPredecessor(Vertex * pred);
  bool addSuccessor(Vertex * succ);
  bool removePredecessor(Vertex * pred);
  bool removeSuccessor(Vertex * succ);

  // Access
  int getNumberOfPredecessors(void);
  int getNumberOfSuccessors(void);

  // Iterators
  iterator predecessors_begin(void);
  iterator predecessors_end(void);

  iterator successors_begin(void);
  iterator successors_end(void);

private:
  // Indexing
  void visit(Vertex * pred, int method);
  Vertex * createPostOrder(vector<Vertex *> * postOrder, int method);
};


class Graph {
// Local types
public:
  /* The IndexMethod values obey the following rules:
   * 0x01 (first bit) Indicates if predecessors are rescheduled on traversal
   * 0x02 (second bit) Indicates if successors are rescheduled on traversal
   * 0x04 (third bit) Indicates if successors are ordered with their labels
   */
  typedef enum {
    ShortIndexing = 0x00,
    SuccessorOrder = 0x02,
    Standard = 0x03,
    LabelOrder = 0x07,
    UndefinedMethod = 0x10
  } IndexMethod;


  typedef enum {
    DFS,
    BBFS,
    NoLabels,
    Undefined
  } SearchMethod;


  class Query {
  friend class Graph;
  friend void queryWorker(Graph * graph, int threadId);

  // Data members
  private:
    Vertex * source;
    Vertex * target;
    bool answer = false;
    bool error = false;
    bool cancel = false;
    bool internal = false;
    long long searchTime = 0;
    Graph::SearchMethod method;

  // Function members
  public:
    Query(Vertex * u, Vertex * v, SearchMethod searchMethod = Undefined) {
      source = u;
      target = v;
      method = searchMethod;
    }

    Vertex * getSource(void);
    Vertex * getTarget(void);
    bool getAnswer(void);
    bool isError(void);
  };


// Data members
protected:
  bool indexed = false;
  bool condensed = false;
  IndexMethod indexMethod = UndefinedMethod;
  unsigned int edgeCount = 0;

  vector<Vertex *> vertices;
  vector<Vertex *> sources;
  vector<Vertex *> sinks;

  // Global IDs to distinguish between seperate DFSs
  unsigned char DFSId[MAX_THREADS];

private:
  // Indexing
  mutex indexMutex;

  // Queries
  mutex jobMutex;
  semaphore jobSemaphore;
  list<Query *> jobQueue;

  // Results
  mutex resultMutex;
  mutex internalResultMutex;
  semaphore resultSemaphore;
  semaphore internalResultSemaphore;
  list<Query *> resultQueue;
  list<Query *> internalResultQueue;

  // Reordering vectors
  vector<Vertex *> successorQueue;
  vector<Vertex *> predecessorQueue;

  // Multi-threading
  bool threadShutdown = false;
  atomic<int> activeThreads{0};
  atomic<bool> noQueries{true};
  mutex queryWaitMutex;
  mutex globalWaitMutex;
  condition_variable queryWaitCondition;
  condition_variable globalWaitCondition;
  thread queryThreads[MAX_THREADS];

#ifdef ENABLE_STATISTICS
  // Counters
  atomic<uintmax_t> queryCount{0};
  atomic<uintmax_t> positiveQueryCount{0};
  atomic<uintmax_t> negativeQueryCount{0};
  atomic<uintmax_t> shortNegativeQueryCount{0};

  // DFS overhead statistics
  mutex statisticsMutex;
  double positiveQueryOverhead = 0.0L;
  double negativeQueryOverhead = 0.0L;
#endif // ENABLE_STATISTICS

#ifdef ENABLE_BENCHMARKS
  // Counters
  atomic<long long> queryNumber{0};
  atomic<long long> cyclesSpentIndexing{0};
  atomic<long long> cyclesSpentQuerying{0};
  atomic<long long> graphMemoryUsage{0};
#endif // ENABLE_BENCHMARKS

// Function members
public:
  // Constructors & Destructor
  Graph(void) {
    for (int i = 0; i < MAX_THREADS; i++)
      queryThreads[i] = thread(queryWorker, this, i);
  }

  ~Graph(void) {
    threadShutdown = true;

    for (int i = 0; i < MAX_THREADS; i++)
      jobSemaphore.post();

    for (int i = 0; i < MAX_THREADS; i++)
      queryThreads[i].join();

    for (auto it = jobQueue.begin(), end = jobQueue.end(); it != end; ++it)
      (*it)->error = true;

    for (auto it = internalResultQueue.begin(), end = internalResultQueue.end(); it != end; ++it)
      delete *it;
    
    for (auto it = vertices.begin(), end = vertices.end(); it != end; ++it)
      delete *it;
  }

  // Parser functions
  static Graph * createFromDotFile(const char * fileName, bool noDoubleEdges = false);
  static Graph * createFromGraFile(const char * fileName, bool noDoubleEdges = false);

  // Modificators
  Vertex * addVertex(void);
  void removeVertex(Vertex * v);
  void mergeVertices(Vertex * s, Vertex * t);
  bool addEdge(Vertex * s, Vertex * t);
  bool removeEdge(Vertex * s, Vertex * t);
  void setIndexMethod(IndexMethod newMethod);

  // Access
  unsigned int getEdgeCount(void);
  unsigned int getVertexCount(void);
  Vertex * getVertexFromId(int id);
  IndexMethod getIndexMethod(void);

  // Queries
  void pushQuery(Query * query);
  Query * pullResult(void);
  void endOfQueries(void);

  // Statistics
  bool statisticsAreEnabled(void);
  uintmax_t getQueryCount(void);
  uintmax_t getPositiveQueryCount(void);
  uintmax_t getNegativeQueryCount(void);
  uintmax_t getShortNegativeQueryCount(void);
  double getPositiveQueryOverhead(void);
  double getNegativeQueryOverhead(void);
  void printStatistics(ostream &os);

  // Benchmarking
  bool benchmarksAreEnabled(void);
  long long getQueryNumber(void);
  long long getCyclesSpentIndexing(void);
  long long getCyclesSpentQuerying(void);
  void printBenchmarks(ostream &os);

protected:
  // Indexing
  void labelVertices(bool retro, bool reverse);
  void indexGraph(void);

  // Maintenance
  void discoverExtremities(void);
  void condenseGraph(void);

  // Multi-threading
  void startQuery(void);
  void stopQuery(void);
  void startGlobalOperation(void);
  void stopGlobalOperation(void);

private:
  // Maintenance
  void condenseFromSource(Vertex * source);
  Vertex * addVertexUnsafe(void);
  bool addEdgeUnsafe(Vertex * source, Vertex * target);

  // Internal query functions
  void * areConnectedDFS(void * arg);
  void * areConnectedBBFS(void * arg);
  void * areConnectedNoLabels(void * arg);
  void checkIdOverflow(void);

#ifdef ENABLE_STATISTICS
  // Internal statistic maintenance
  void registerQueryStatistics(bool result, unsigned int pathSize, uintmax_t searchedNodes);
#endif // ENABLE_STATISTICS

  friend void queryWorker(Graph * graph, int id);
};

#endif // GRAPH_HPP
